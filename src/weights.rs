
//! Autogenerated weights for pallet_artists
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Lois.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/debug/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_artists
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artists.
pub trait WeightInfo {
    fn register(n: u32, g: u32, a: u32, ) -> Weight;
    fn unregister(n: u32, g: u32, a: u32, ) -> Weight;
    fn update_alias(n: u32, x: u32, ) -> Weight;
    fn update_add_genres(n: u32, ) -> Weight;
    fn update_remove_genres(n: u32, ) -> Weight;
    fn update_clear_genres(n: u32, ) -> Weight;
    fn update_description() -> Weight;
    fn update_add_assets(n: u32, ) -> Weight;
    fn update_remove_assets(n: u32, ) -> Weight;
    fn update_clear_assets(n: u32, ) -> Weight;
}

/// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Artists::ArtistNameOf` (r:1 w:0)
    /// Proof: `Artists::ArtistNameOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `g` is `[0, 5]`.
    /// The range of component `a` is `[0, 64]`.
    fn register(_n: u32, _g: u32, a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `76`
        //  Estimated: `3541`
        // Minimum execution time: 390_000_000 picoseconds.
        Weight::from_parts(551_025_094, 3541)
            // Standard Error: 184_050
            .saturating_add(Weight::from_parts(10_438_238, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `g` is `[0, 5]`.
    /// The range of component `a` is `[0, 64]`.
    fn unregister(n: u32, g: u32, a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `196 + a * (32 ±0) + g * (3 ±0) + n * (2 ±0)`
        //  Estimated: `3661 + a * (32 ±0) + g * (3 ±0) + n * (2 ±0)`
        // Minimum execution time: 366_000_000 picoseconds.
        Weight::from_parts(375_009_784, 3661)
            // Standard Error: 99_227
            .saturating_add(Weight::from_parts(453_322, 0).saturating_mul(g.into()))
            // Standard Error: 8_575
            .saturating_add(Weight::from_parts(31_571, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
            .saturating_add(Weight::from_parts(0, 3).saturating_mul(g.into()))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `x` is `[1, 128]`.
    fn update_alias(n: u32, _x: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `195 + n * (2 ±0)`
        //  Estimated: `3660 + n * (2 ±0)`
        // Minimum execution time: 143_000_000 picoseconds.
        Weight::from_parts(148_471_427, 3660)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[0, 4]`.
    fn update_add_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `3663 + n * (3 ±0)`
        // Minimum execution time: 143_000_000 picoseconds.
        Weight::from_parts(148_078_387, 3663)
            // Standard Error: 77_100
            .saturating_add(Weight::from_parts(1_068_165, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 3).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 5]`.
    fn update_remove_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `3663 + n * (3 ±0)`
        // Minimum execution time: 138_000_000 picoseconds.
        Weight::from_parts(143_101_693, 3663)
            // Standard Error: 54_093
            .saturating_add(Weight::from_parts(67_581, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 3).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[0, 5]`.
    fn update_clear_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `3663 + n * (3 ±0)`
        // Minimum execution time: 138_000_000 picoseconds.
        Weight::from_parts(142_273_366, 3663)
            // Standard Error: 46_531
            .saturating_add(Weight::from_parts(182_491, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 3).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn update_description() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198`
        //  Estimated: `3663`
        // Minimum execution time: 148_000_000 picoseconds.
        Weight::from_parts(154_000_000, 3663)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[0, 63]`.
    fn update_add_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (32 ±0)`
        //  Estimated: `3663 + n * (32 ±0)`
        // Minimum execution time: 153_000_000 picoseconds.
        Weight::from_parts(158_580_924, 3663)
            // Standard Error: 6_947
            .saturating_add(Weight::from_parts(1_800_356, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[1, 64]`.
    fn update_remove_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (32 ±0)`
        //  Estimated: `3663 + n * (32 ±0)`
        // Minimum execution time: 152_000_000 picoseconds.
        Weight::from_parts(153_156_242, 3663)
            // Standard Error: 6_775
            .saturating_add(Weight::from_parts(1_805_166, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `n` is `[0, 64]`.
    fn update_clear_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (32 ±0)`
        //  Estimated: `3663 + n * (32 ±0)`
        // Minimum execution time: 139_000_000 picoseconds.
        Weight::from_parts(144_351_693, 3663)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
    }
}